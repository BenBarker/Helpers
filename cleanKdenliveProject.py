'''Clean out kdenlive project folders. 
I keep all my clips in one directory. Sometimes I end up with unused clips. 
This cleans them. This can be aggressive, use -t option to check first.

>>>python3 cleanKdenliveProject.py [textFile] [directory] [-t]

First argument is the text file generated by kdenlive's project settings
'export plain text' button (or any plain text file with paths).
Second argument is a directory to check.
Will delete files in that directory not found in text file that have an 
extention listed in 'fileTypes'.
'''
import argparse
import errno
import os

#only these file types are considered for deletion
fileTypes=['.mp4','.ogg','.wav','.mp3']

#Parse command line
parser=argparse.ArgumentParser(description='Clean kdenlive project directory')
parser.add_argument('projectFiles',
                    help='text file of project paths exported from kdenlive')
parser.add_argument('directory', help='the directory to clean')
parser.add_argument('-t','--test',help="only print output, don't delete",
					action="store_true")
args=parser.parse_args()

#sanity check
if not os.path.exists(args.directory):
	raise FileNotFoundError(errno.ENOENT, os.strerror(errno.ENOENT), 
		args.directory)
if not os.path.isfile(args.projectFiles):
	raise FileNotFoundError(errno.ENOENT, os.strerror(errno.ENOENT), 
		args.projectFiles)

#get list of files in directory 
filesOnDisk=list()
for file in os.listdir(args.directory):
	fileName,fileExt=os.path.splitext(file)
	if not fileExt.lower() in fileTypes:
		continue
	filesOnDisk.append(os.path.abspath(os.path.join(args.directory,file)))

#parse text file for paths
filesInProject=list()
with open(args.projectFiles) as file:
	for line in file:
		filePath=line.rstrip()
		if not os.path.isfile(filePath):
			continue
		filesInProject.append(os.path.abspath(line.rstrip()))
if not filesInProject:
	raise RuntimeError("No file paths found in text file")

#If files on disk aren't in text file add to delete list.
filesToDelete=list()
for file in filesOnDisk:
	if not file in filesInProject:
		filesToDelete.append(file)

#If there are any deletable files prompt user and take action
if not filesToDelete:
	print("No unused files found in project directory.")
else:
	doIt=None
	while not doIt:
		doIt=input("Delete {} files? (y/N)".format(len(filesToDelete))).lower()
		if doIt=='y' or doIt=='yes':
			for file in filesToDelete:
				if args.test:
					print("not deleting (test)",file)
				else:
					print("deleting",file)
					try:
						os.remove(file)
					except(OSError,e):
						print("failed:",e)
		elif doIt=='n' or doIt=='no' or not doIt:
			break
		else:
			doIt=None
	
